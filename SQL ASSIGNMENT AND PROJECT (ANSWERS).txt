

SQL ASSIGNMNET- 1  BASIC QUESTIONS 

1 - CREATE DATABASE BRANDS; , CREATE DATABASE PRODUCTS;
2 - CREATE TABLE ITEMS (ITEM_ID INT,
ITEM_DESCRIPTION VARCHAR(100),
VENDORS_NOS INT,
VENDORS_NAME CHAR(100),
BOTTLE_SIZE INT,
BOTTLE_PRICE FLOAT);

2 -  CREATE TABLE PRODUCT(PRODUCT_ID INT,
COUNTRY CHAR(25),
PRODUCT CHAR(30),
UNIT_SOLD FLOAT,
MANUFACTURING_PRICE INT,
SALE_PRICE INT,
GROSS_SALES INT,
SALES INT,
COGS INT,
PROFIT INT,
DATE_LIST DATE,
MONTH_NUMBER INT,
MONTH_NAME CHAR(20),
YEAR_LIST INT);

3- INSERT INTO ITEMS VALUES(1,'TRAVIS HASSE APPLE PIE',305,'MHW LTD',750,9.77),
(2,'D_ARISTI XTABENTUN',391,'ANCHOR DISTILLING (PREISS IMPORTS)',750,14.12),
(3,'HIRAM WALKER PEACH BRANDY',370,'PERNOD RICARD USA/AUSTIN NICHOLS',1000,6.50),
(4,'OAK CROSS WHISKY',305,'MHW LTD',750,25.33),
(5,'UV RED(CHERRY) VODKA',380,'PHILLIPS BEVERAGE COMPANY',200,1.97),
(6,'HEAVEN HILL OLD STYLE WHITE LABEL',259,'HEAVEN HILL DISTILLERIES INC.',750,6.37),
(7,'HYDE HERBAL LIQUEUR',194,'FIRE TAIL BRANDS LLC',750,5.06),
(8,'DUPONT CALVADOS FINE RESERVE',403,'ROBERT KACHER SELECTIONS',750,23.61);


3 -INSERT INTO PRODUCT VALUES(1,'CANADA','CARRETERA',1618.5,3,20,32370,32370,16185,16185,'2014-01-01',1,'JANUARY',2014);
(2,'GERMANY','CARRETERA',1312,3,20,26420,32370,13210,13210,'2014-01-01',1,'JANUARY',2015),
(3,'FRANCE','CARRETERA',2178,3,15,32670,32670,21780,10890,'2014-06-01',6,'JUNE',2016),
(4,'GERMANY','CARRETERA',888,3,15,13320,13320,8880,4440,'2014-06-01',6,'JUNE',2016),
(5,'MEXICO','CARRETERA',2470,3,15,37050,37050,24700,12350,'2014-06-01',6,'JUNE',2018),
(6,'GERMANY','CARRETERA',1513,3,350,529550,529550,393380,136170,'2014-12-01',12,'DECEMBER',2019),
(7,'GERMANY','MONTANA',921,5,15,13815,13815,9210,4605,'2014-03-01',3,'MARCH',2020),
(8,'CANADA','MONTANA',2518,3,12,30216,30216,7554,22662,'2014-06-01',6,'JUNE',2021);

4- DELETE FROM PRODUCT WHERE UNIT_SOLD =1618.5;
DELETE FROM PRODUCT WHERE UNIT_SOLD =888;
DELETE FROM PRODUCT WHERE UNIT_SOLD =2470;

5 - BEGIN TRANSACTION

DROP TABLE PRODUCT

ROLLBACK


SQL ASSIGNMNET- 1  INTERMEDIATE QUESTIONS

BIG TABLES

1 -SELECT SUM(SALE_PRICE) FROM PRODUCT; 
SELECT SUM(GROSS_SALES) FROM PRODUCT;

2 - 

3-SELECT PRODUCT FROM PRODUCT
WHERE SALES = 37050;

4 - SELECT COUNTRY FROM PRODUCT 
WHERE PROFIT BETWEEN 4605 AND 22662; 

5- SELECT PRODUCT_ID FROM PRODUCT
WHERE SALES = 24700; THE ANSWER IS (NONE)

SMALL TABLES

1 -SELECT ITEM_DESCRIPTION FROM ITEMS
WHERE BOTTLE_SIZE = 750;

2 -SELECT VENDORS_NAME FROM ITEMS
WHERE VENDORS_NOS IN (305,380,391);

3-SELECT SUM(BOTTLE_PRICE) FROM ITEMS

4-ALTER TABLE ITEMS
ADD CONSTRAINT pk_items PRIMARY KEY (ITEM_ID)

5-SELECT ITEM_ID FROM ITEMS
WHERE BOTTLE_PRICE = 5.06


ADVANCE QUESTIONS (FOR THIS ADVANCE QUESTIONS, I HAVE CRETAED PRODUCT  TABLE IN BRANDS DATABASE TO APPLY JOINS)

1 -SELECT * FROM ITEMS
JOIN PRODUCT
ON ITEMS.ITEM_ID=PRODUCT.PRODUCT_ID

SELECT * FROM ITEMS
FULL OUTER JOIN PRODUCT
ON ITEMS.ITEM_ID=PRODUCT.PRODUCT_ID

SELECT * FROM ITEMS
LEFT JOIN PRODUCT
ON ITEMS.ITEM_ID=PRODUCT.PRODUCT_ID

2-SELECT * FROM ITEMS
RIGHT JOIN PRODUCT
ON ITEMS.ITEM_ID=PRODUCT.PRODUCT_ID

SELECT * FROM ITEMS
CROSS JOIN PRODUCT\

3-SELECT ITEM_DESCRIPTION,GROSS_SALES FROM ITEMS
JOIN PRODUCT
ON ITEMS.ITEM_ID=PRODUCT.PRODUCT_ID
WHERE PRODUCT.GROSS_SALES = 13320

4-

*/--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/* (NEXT ASSIGNMENT)

SQL ASSIGNMNET-  2 

1 - CREATE DATABASE ORDER_STORES_DATA;

2- CREATE TABLE ORDERS_TABLE(ORDER_DATE DATE,
REGION VARCHAR(50),
REP CHAR(30),
ORDER_ITEM CHAR(30),
UNITS INT,
UNIT_COST FLOAT,
TOTAL_PRICE FLOAT,
ORDER_ID INT);

CREATE TABLE STORES_TABLE(STORE_ID INT,
STORE_TYPE CHAR(5),
ASSORTMENT INT,
COMPETITION_DISTANCE INT,
MONTH_LIST INT,
YEAR_LIST INT,
PROMOINTERVAL CHAR(10)
);

3-INSERT INTO ORDERS_TABLE VALUES('2021-01-06','EAST','ARUNA','PENCIL',95,1.99,189.05,1),
('2021-01-23','CENTRAL','KIVELL','ERASER',50,19.99,999.05,2),
('2021-02-09','CENTRAL','GANESH','',36,4.99,179.64,3),
('2021-02-26','CENTRAL','PAYAL','',27,19.99,539.73,4),
('2021-03-15','WEST','SORVINO','',56,2.99,167.44,5),
('2021-04-01','EAST','HITESH','PENCIL',60,4.99,299.40,6),
('2021-04-18','CENTRAL','AKSHITA','',75,1.99,149.25,7),
('2021-05-05','CENTRAL','RUCHIKA','BOOKS',90,4.99,449.10,8),
('2021-05-22','WEST','SURBHI','',32,1.99,63.68,9),
('2021-06-08','EAST','JONES','SUITCASE',60,8.99,539.40,10);


INSERT INTO STORES_TABLE VALUES(1,'C',31,1270,9,2008,'JAN'),
(2,'A',46,570,11,2007,'FEB'),
(3,'A',46,14130,12,2006,'MAR'),
(4,'C',36,620,9,2009,''),
(5,'A',28,29910,4,2015,'MAY'),
(6,'A',18,310,12,2013,'JUNE'),
(7,'A',25,24000,4,2013,''),
(8,'A',29,7520,10,2014,'AUG'),
(9,'C',50,2030,8,2000,''),
(10,'A',15,3160,9,2009,'OCT');

4 - ALTER TABLE ORDERS_TABLE
ALTER COLUMN ORDER_ID INT NOT NULL;

ALTER TABLE ORDERS_TABLE
ADD CONSTRAINT PK_ORDERS_TABLE PRIMARY KEY (ORDER_ID);

5 - UPDATE STORES_TABLE
SET STORE_NAMES = 'CAR'
WHERE STORE_ID = 1

UPDATE STORES_TABLE
SET STORE_NAMES = 'BIKES'
WHERE STORE_ID = 2

UPDATE STORES_TABLE
SET STORE_NAMES = 'HARDWARE'
WHERE STORE_ID = 3

UPDATE STORES_TABLE
SET STORE_NAMES = 'ELECTRICS'
WHERE STORE_ID = 4

UPDATE STORES_TABLE
SET STORE_NAMES = 'FIBERS'
WHERE STORE_ID = 5

UPDATE STORES_TABLE
SET STORE_NAMES = 'ELASTICS'
WHERE STORE_ID = 6

UPDATE STORES_TABLE
SET STORE_NAMES = 'BOOKS'
WHERE STORE_ID = 7

UPDATE STORES_TABLE
SET STORE_NAMES = 'SHOES'
WHERE STORE_ID = 8

UPDATE STORES_TABLE
SET STORE_NAMES = 'CLOTHES'
WHERE STORE_ID = 9

UPDATE STORES_TABLE
SET STORE_NAMES = 'SCRAPS'
WHERE STORE_ID = 10

6- ALTER TABLE STORES_TABLE
ADD FOREIGN KEY (STORE_ID) REFERENCES ORDERS_TABLE (ORDER_ID);

7 - UPDATE ORDERS_TABLE
SET ORDER_ITEM= 'COMPASS'
WHERE ORDER_ID = 3;

UPDATE ORDERS_TABLE
SET ORDER_ITEM= 'TORCH'
WHERE ORDER_ID = 4;

UPDATE ORDERS_TABLE
SET ORDER_ITEM= 'PHONE'
WHERE ORDER_ID = 5;

UPDATE ORDERS_TABLE
SET ORDER_ITEM= 'LAPTOP'
WHERE ORDER_ID = 7;

UPDATE ORDERS_TABLE
SET ORDER_ITEM= 'BOX'
WHERE ORDER_ID = 9;

8 - UPDATE STORES_TABLE
SET PROMOINTERVAL = 'APRIL'
WHERE STORE_ID = 4;

UPDATE STORES_TABLE
SET PROMOINTERVAL = 'JUL'
WHERE STORE_ID = 7;

UPDATE STORES_TABLE
SET PROMOINTERVAL = 'SEP'
WHERE STORE_ID = 9;

9 -  EXEC sp_rename 'STORES_TABLE.ASSORTMENT', 'STORE_NOS';

10 - EXEC sp_rename 'ORDERS_TABLE.ORDER_ITEM', 'ITEM_NAME';
EXEC sp_rename 'ORDERS_TABLE.REP', 'CUSTOMERS_NAME';

11 - SELECT * FROM ORDERS_TABLE
ORDER BY UNIT_COST DESC;

SELECT * FROM ORDERS_TABLE
ORDER BY TOTAL_PRICE ASC;

12 - EXEC sp_rename 'ORDERS_TABLE.CUSTOMERS_NAME', 'CUS_NAME';

SELECT CUS_NAME FROM ORDERS_TABLE
WHERE REGION = 'EAST';

13 - SELECT SUM (TOTAL_PRICE), SUM(UNIT_COST) FROM ORDERS_TABLE;

14 - 

15 - SELECT ITEM_NAME, REGION FROM ORDERS_TABLE
WHERE ORDER_ID IN (4,5,6,9);

16 - SELECT YEAR_LIST FROM STORES_TABLE
WHERE COMPETITION_DISTANCE IN (29910,310,3160);

17 - SELECT ITEM_NAME FROM ORDERS_TABLE
WHERE TOTAL_PRICE > 200 AND TOTAL_PRICE <400

SELECT ITEM_NAME FROM ORDERS_TABLE
WHERE TOTAL_PRICE BETWEEN 200 AND 400

18 - EXEC sp_rename 'STORES_TABLE.COMPETITION_DISTANCE','CD'

SELECT SUM(CD) FROM STORES_TABLE

19 - SELECT COUNT (STORE_TYPE) AS COUNT_OF_STORE,COUNT (CD) AS COUNT_CD FROM STORES_TABLE

20 - SELECT * FROM STORES_TABLE
CROSS JOIN ORDERS_TABLE

21 - BEGIN TRAN

DROP TABLE STORES_TABLE, ORDERS_TABLE

ROLLBACK

*/--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/* (NEXT ASSIGNMENT)

SQL ASSIGNMNET-  3

Assingment Number - 1

1 - SELECT * FROM EMP_DETAILS
LEFT JOIN EMP_SALARY 
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE EMP_SALARY.EMPID IS NULL;

2 - SELECT * FROM EMP_DETAILS
LEFT JOIN EMP_SALARY 
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE PROJECT IS NULL;

3 - SELECT FULL_NAME, DATE_OF_JOIN FROM EMP_DETAILS
WHERE DATE_OF_JOIN LIKE '%2020%'

4 - SELECT FULL_NAME, SALARY FROM EMP_DETAILS
LEFT JOIN EMP_SALARY 
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE SALARY IS NOT NULL

5 - 

6- SELECT FULL_NAME, SALARY FROM EMP_DETAILS
LEFT JOIN EMP_SALARY 
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID

7 - 

8 - SELECT PROJECT, COUNT(PROJECT) FROM EMP_SALARY GROUP BY PROJECT HAVING COUNT(PROJECT)>1

9-

10 -SELECT MAX(SALARY) FROM EMP_SALARY
WHERE SALARY NOT IN (SELECT TOP 2 SALARY FROM EMP_SALARY ORDER BY SALARY DESC);


ASSISGNMENT NOS 2

1 -SELECT EMPID, FULL_NAME FROM EMP_DETAILS
WHERE MANAGER_ID = 986

2 - SELECT PROJECT, COUNT(PROJECT) FROM EMP_SALARY GROUP BY PROJECT

3 - SELECT  FULL_NAME, PROJECT FROM EMP_DETAILS
  JOIN EMP_SALARY 
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE PROJECT = 'P1'

4 - SELECT MAX(SALARY), MIN(SALARY),AVG (SALARY) FROM EMP_SALARY

5 - SELECT FULL_NAME, SALARY FROM EMP_DETAILS
JOIN EMP_SALARY
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE SALARY BETWEEN 9000 AND 15000

6 - SELECT FULL_NAME, CITY, MANAGER_ID  FROM EMP_DETAILS
WHERE MANAGER_ID = 321

7- SELECT FULL_NAME  FROM EMP_DETAILS
WHERE CITY = 'CALIFORNIA' OR MANAGER_ID = 321

8 - SELECT * FROM EMP_DETAILS
JOIN EMP_SALARY
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE PROJECT <> 'P1'

9 - SELECT FULL_NAME, SALARY, VARIABLE , (SALARY+VARIABLE) AS TOTAL FROM  EMP_SALARY
JOIN EMP_DETAILS
ON EMP_SALARY.EMPID = EMP_DETAILS.EMPID

10 - SELECT *  FROM EMP_DETAILS
WHERE FULL_NAME LIKE '%HN%'


ASSISGNMENT NOS 3

1 -  SELECT EMPID FROM EMP_DETAILS
UNION ALL
SELECT EMPID FROM EMP_SALARY

2 - SELECT EMPID FROM EMP_DETAILS
UNION
SELECT EMPID FROM EMP_SALARY

3 - SELECT FULL_NAME,MANAGER_ID,DATE_OF_JOIN,CITY,PROJECT,SALARY,VARIABLE FROM EMP_DETAILS
JOIN EMP_SALARY
ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID

4 - SELECT EMPID FROM EMP_DETAILS
UNION
SELECT EMPID FROM EMP_SALARY

5 - SELECT EMPID FROM EMP_DETAILS
EXCEPT
SELECT EMPID FROM EMP_SALARY

6 - 

7- SELECT FULL_NAME, CHARINDEX('S', FULL_NAME) AS NEW_FULL_NAME FROM EMP_DETAILS

8 - SELECT EMP_DETAILS.EMPID AS EMP, EMP_SALARY.EMPID AS EMPP, MANAGER_ID AS MI FROM EMP_DETAILS
JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID

9 - SELECT FULL_NAME, SUBSTRING(FULL_NAME,1,CHARINDEX(' ',FULL_NAME+' ')-1) AS MM FROM EMP_DETAILS

10 - SELECT UPPER(FULL_NAME) AS UPPER_NAME, LOWER(CITY) AS LOWER_CITY FROM EMP_DETAILS


ASSISGNMENT NOS 4

1 - SELECT FULL_NAME, LEN(FULL_NAME)- LEN(REPLACE(FULL_NAME,'N','')) FROM EMP_DETAILS

2 - UPDATE EMP_DETAILS SET FULL_NAME = LTRIM(RTRIM(FULL_NAME));

3 - SELECT *  FROM EMP_DETAILS
LEFT JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE PROJECT IS NULL;

4 - SELECT FULL_NAME  FROM EMP_DETAILS
JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE SALARY >= 5000 AND SALARY <=10000;

5 - SELECT GETDATE() AS CUREENT_DATETIME;

6 - SELECT * FROM EMP_DETAILS
JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE DATE_OF_JOIN LIKE '%2020%'

7 - SELECT * FROM EMP_DETAILS
JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
WHERE SALARY IS NOT NULL;

8 - SELECT PROJECT, COUNT(PROJECT) FROM  EMP_SALARY GROUP BY PROJECT ORDER BY COUNT(PROJECT) DESC

9 - SELECT FULL_NAME, COALESCE(EMP_SALARY.SALARY, 'NO SALARY RECORD') AS SALARY FROM EMP_DETAILS
LEFT JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID

10 - SELECT FULL_NAME, CITY,SALARY,HEIGHT FROM EMP_DETAILS
JOIN EMP_SALARY ON EMP_DETAILS.EMPID = EMP_SALARY.EMPID
JOIN EMP_PT ON EMP_DETAILS.EMPID = EMP_PT.EMPID


ADVANCED ASSIGNMENT

1 - SELECT UPPER (EMP_FNAME) AS EMPNAME FROM EMPLOYEEINFO;

2 - SELECT DEPARTMENT, COUNT(DEPARTMENT) AS DEPARTMENT_NUMBER FROM EMPLOYEEINFO WHERE DEPARTMENT = 'HR' GROUP BY DEPARTMENT;

3 - SELECT GETDATE() AS CURRENT_DATETIME;

4 - SELECT LEFT(EMP_FNAME,4) AS NEW_NAME FROM EMPLOYEEINFO

5 - SELECT EMP_ADDRESS, SUBSTRING(EMP_ADDRESS,1, CHARINDEX('(',EMP_ADDRESS+ '(') -1) FROM EMPLOYEEINFO

6 - SELECT * INTO NEWTABLE FROM EMPLOYEEINFO;

7 - SELECT EMP_FNAME, SALARY FROM EMPLOYEEINFO
JOIN EMPLOYEE_POSITION
ON EMPLOYEEINFO.EMPID = EMPLOYEE_POSITION.EMPID
WHERE SALARY BETWEEN 50000 AND 100000

8 - SELECT EMP_FNAME FROM EMPLOYEEINFO
WHERE EMP_FNAME LIKE 'S%'

9  -SELECT TOP 3 *  FROM EMPLOYEE_POSITION

10 - SELECT EMP_FNAME +' '+ EMP_LNAME AS FULLNAME FROM EMPLOYEEINFO

11- SELECT GENDER, COUNT(EMP_FNAME) FROM EMPLOYEEINFO WHERE DOB BETWEEN '1970-05-02' AND '1975-12-31' GROUP BY GENDER

12 - SELECT * FROM EMPLOYEEINFO ORDER BY EMP_LNAME DESC, DEPARTMENT ASC

13 - SELECT * FROM EMPLOYEEINFO
WHERE LEN(EMP_LNAME) = 5 AND RIGHT(EMP_LNAME,1) = 'A';

14- SELECT * FROM EMPLOYEEINFO
WHERE EMP_FNAME <> 'SANJAY' AND EMP_FNAME <> 'SONIA'

15 - SELECT * FROM EMPLOYEEINFO
WHERE EMP_ADDRESS = 'DELHI (DEL)'

16 - SELECT * FROM EMPLOYEEINFO
JOIN EMPLOYEE_POSITION ON EMPLOYEEINFO.EMPID=EMPLOYEE_POSITION.EMPID
WHERE EMP_POSITION = 'MANAGER'

17 - SELECT DEPARTMENT, COUNT(*) AS EMPLOYEECOUNT FROM EMPLOYEEINFO GROUP BY DEPARTMENT ORDER BY EMPLOYEECOUNT ASC

18 - 

19 - SELECT EMP_FNAME,EMP_LNAME,DEPARTMENT,PROJECT,EMP_ADDRESS,DOB, GENDER FROM EMPLOYEEINFO
JOIN EMPLOYEE_POSITION ON EMPLOYEEINFO.EMPID = EMPLOYEE_POSITION.EMPID 
WHERE DATA_OF_JOINING IS NOT NULL

20 - SELECT TOP 2 SALARY FROM EMPLOYEE_POSITION ORDER BY SALARY ASC
SELECT TOP 2 SALARY FROM EMPLOYEE_POSITION ORDER BY SALARY DESC

21 - 

22 - SELECT DEPARTMENT,EMP_ADDRESS, COUNT(*) AS DUPLICATE FROM EMPLOYEEINFO GROUP BY DEPARTMENT, EMP_ADDRESS HAVING COUNT(*) >1
SELECT EMP_POSITION, COUNT(*) AS DUPLICTAE  FROM EMPLOYEE_POSITION GROUP BY EMP_POSITION HAVING COUNT(*) > 1

23 - SELECT * FROM EMPLOYEEINFO
LEFT JOIN EMPLOYEE_POSITION ON EMPLOYEEINFO.EMPID = EMPLOYEE_POSITION.EMPID
WHERE DEPARTMENT = 'HR' OR DEPARTMENT = 'ADMIN'

24 - SELECT  TOP 3 * FROM EMPLOYEEINFO ORDER BY EMPID DESC

25 - SELECT DISTINCT (SALARY) FROM EMPLOYEE_POSITION ORDER BY SALARY ASC OFFSET 2 ROWS FETCH NEXT 1 ROW ONLY

26 - SELECT TOP 1 * FROM EMPLOYEEINFO ORDER BY EMPID 
SELECT TOP 1 * FROM EMPLOYEEINFO ORDER BY EMPID DESC

27 - ALTER TABLE EMPLOYEEINFO
ADD EMAIL_VALIDATION CHAR(50)

28 - SELECT DEPARTMENT, COUNT(*) FROM EMPLOYEEINFO GROUP BY DEPARTMENT HAVING COUNT(*) < 2 

29 - SELECT EMP_POSITION, SALARY FROM EMPLOYEE_POSITION

30 - SELECT TOP 50 PERCENT * FROM EMPLOYEEINFO ORDER BY GENDER ASC


*/--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/* (NEXT ASSIGNMENT)


SQL ASSIGNMNET-  4

1 - CREATE TABLE STUDENT_TABLE(STUDENT_ID INT PRIMARY KEY NOT NULL,
STUDENT_NAME VARCHAR(50),
STUDENT_SURNAME CHAR(30),
BIRTH_DATE DATE,
GENDER CHAR (5),
CLASS INT,
POINT INT
);


2 -  INSERT INTO STUDENT_TABLE VALUES (102,'GANESH','RANGASWAMI','2009-10-12','' ,'6','45'),
 (103,'JAYESH','SONI','2011-09-11','' ,'7','65'),
 (104,'RADHA','JOSHI','2012-04-30','' ,'9','95'),
 (105,'GAYTRI','NAI','2020-10-12','' ,'5','12'),
 (106,'RAJESH','JAIN','2019-02-19','' ,'9','81'),
 (107,'RUDRA','PRATAP','2003-12-06','' ,'10','76'),
 (108,'HITESH','BISTH','2018-10-07','','5','69'),
 (109,'SUMIT','LAD','2015-10-12','' ,'9','33'),
 (110,'SUCHITRA','LOLITA','2018-10-12','' ,'6','29');

3 - UPDATE STUDENT_TABLE
 SET GENDER = 'F'
 WHERE STUDENT_ID = 101
 

UPDATE STUDENT_TABLE
 SET GENDER = 'M'
 WHERE STUDENT_ID = 102

 UPDATE STUDENT_TABLE
 SET GENDER = 'M'
 WHERE STUDENT_ID = 103

UPDATE STUDENT_TABLE
 SET GENDER = 'F'
 WHERE STUDENT_ID = 104

UPDATE STUDENT_TABLE
 SET GENDER = 'F'
 WHERE STUDENT_ID = 105

UPDATE STUDENT_TABLE
 SET GENDER = 'F'
 WHERE STUDENT_ID = 110

4 - 

5 - UPDATE STUDENT_TABLE
 SET GENDER = 'F'
 WHERE CLASS = 10

6 - 

7-

8- SELECT STUDENT_NAME+' '+STUDENT_SURNAME AS COMBINED_NAME FROM STUDENT_TABLE;

9 -SELECT STUDENT_NAME FROM STUDENT_TABLE WHERE STUDENT_NAME LIKE 'A%'

10 - 

11 - INSERT INTO STUDENT_TABLE VALUES (111, 'EMMA','SOPHIA','2005-11-29','F',9,85), (112, 'ROBERT','','2009-11-29','M',7,71);

12 - SELECT STUDENT_NAME FROM STUDENT_TABLE  WHERE STUDENT_NAME LIKE 'A%' OR STUDENT_NAME LIKE 'D%' OR STUDENT_NAME LIKE 'K%'

13 - 

14 -

15 - SELECT * FROM STUDENT_TABLE WHERE BIRTH_DATE LIKE '%1989%'


*/--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/* (NEXT ASSIGNMENT)

SQL ASSIGNMNET-  5

1 -  CREATE DATABASE UNIVERSITY;

2 A -  CREATE TABLE COLLAGE_TABLE(COLLEGE_ID INT PRIMARY KEY,
 COLLEGE_NAME CHAR(30),
 COLLEGE_ARAE VARCHAR(50));

2 B - CREATE TABLE DEPARTMENT_TABLE (DEPT_ID INT PRIMARY KEY,
 DEPT_NAME CHAR (20),
 DEPAT_FACILITY VARCHAR(50)); 

3 C - CREATE TABLE PROFESSOR_TABLE (PROFESSIOR_ID INT PRIMARY KEY,
 PROFESSIOR_NAME CHAR(20),
 PROFESSIOR_SUBJECT VARCHAR(50));

4 D  -CREATE TABLE STUDENT_TABLE (STUDESNT_ID INT PRIMARY KEY,
 STUDENT_NAME VARCHAR(60),
 STUDENT_STREAM CHAR(35));

5 - 


*/--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/* (NEXT ASSIGNMENT)

SQL PROJECT 

1 - SELECT * FROM EMPLOYEEDETAILS_TABLE1;

2 - SELECT FIRST_NAME FROM EMPLOYEEDETAILS_TABLE1;

3 -  SELECT UPPER (FIRST_NAME) AS first_name FROM EMPLOYEEDETAILS_TABLE1;

4 -SELECT UPPER (FIRST_NAME) AS first_name FROM EMPLOYEEDETAILS_TABLE1;

5 - SELECT FIRST_NAME+' '+LAST_NAME AS NAME FROM EMPLOYEEDETAILS_TABLE1;

6 - SELECT * FROM EMPLOYEEDETAILS_TABLE1  WHERE FIRST_NAME = 'VIKAS'

7 -  SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME LIKE 'A%'

8 -  SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME LIKE 'A%'

9 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME LIKE '%H'

10 -  SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME LIKE '[A-P]%'

11 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME NOT LIKE '[A-P]%'

12 -  SELECT * FROM EMPLOYEEDETAILS_TABLE1  WHERE LEN(GENDER) = 4 AND RIGHT(GENDER,2) = 'LE'

13 - SELECT * FROM EMPLOYEEDETAILS_TABLE1  WHERE FIRST_NAME LIKE 'A%' AND LEN(FIRST_NAME) = 5

14 - SELECT * FROM EMPLOYEEDETAILS_TABLE  WHERE FIRST_NAME LIKE '%\%%' 

15- SELECT DISTINCT (DEPARTMENT)  FROM EMPLOYEEDETAILS_TABLE1

16 - SELECT MAX(SALARY)  FROM EMPLOYEEDETAILS_TABLE1

17 - SELECT MIN(SALARY)  FROM EMPLOYEEDETAILS_TABLE1

18 - SELECT FORMAT(JOINING_DATE,'dd MMM yyyy') AS NEW_JOININGDATE FROM EMPLOYEEDETAILS_TABLE1

19 -  SELECT FORMAT(JOINING_DATE,'yyyy MM dd') AS NEW_JOININGDATE FROM EMPLOYEEDETAILS_TABLE1

20 - SELECT FORMAT(JOINING_DATE,'HH:mm:ss') AS TIME_ONLY FROM EMPLOYEEDETAILS_TABLE1

21 - SELECT YEAR(JOINING_DATE) FROM EMPLOYEEDETAILS_TABLE1

22 -  SELECT MONTH(JOINING_DATE) FROM EMPLOYEEDETAILS_TABLE1

23 - SELECT GETDATE() AS CURRENTDATETIME;

24 - SELECT GETUTCDATE() 

24 A -  SELECT FIRST_NAME,GETDATE() AS CURRENTDATE, JOINING_DATE, DATEDIFF(MONTH,JOINING_DATE,GETDATE()) AS DIFFRENCE_IN_MONTH FROM EMPLOYEEDETAILS_TABLE1

25 -  SELECT FIRST_NAME,GETDATE() AS CURRENTDATE, JOINING_DATE, DATEDIFF(DAY,JOINING_DATE,GETDATE()) AS DIFFRENCE_IN_MONTH FROM EMPLOYEEDETAILS_TABLE1

26- SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE JOINING_DATE LIKE '%2013%'

27 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE MONTH (JOINING_DATE) = 1

28 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE MONTH (JOINING_DATE) = 1

29 -  SELECT COUNT(EMPID) FROM EMPLOYEEDETAILS_TABLE1

31 - SELECT TOP 1 * FROM EMPLOYEEDETAILS_TABLE1

32 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME IN ('Vikas', 'Ashish','Nikhil')

33 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE FIRST_NAME NOT IN ('Vikas', 'Ashish','Nikhil')

34 - SELECT RTRIM(FIRST_NAME) FROM EMPLOYEEDETAILS_TABLE1

35 -  SELECT LTRIM(FIRST_NAME) FROM EMPLOYEEDETAILS_TABLE1

36 -   SELECT FIRST_NAME, CASE WHEN GENDER = 'MALE' THEN 'M' WHEN GENDER = 'FEMALE' THEN 'F' ELSE''END AS M_F  FROM EMPLOYEEDETAILS_TABLE1

37 - SELECT CONCAT('HELLO',' ',FIRST_NAME) AS NEW FROM EMPLOYEEDETAILS_TABLE1

38 =  SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE SALARY > 600000

39 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE SALARY < 700000

40 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 WHERE SALARY BETWEEN 500000 AND 600000

41 - CREATE TABLE PROJECT_DETAILS(PROJECTDETAILS_ID INT, EMPLOYEEDETAIL_ID INT, PROJECT_NAME CHAR(50));

INSERT INTO PROJECT_DETAILS VALUES(1,1,'TASK TRACK'),
  (2,1,'CLP'),
  (3,1,'SURVEY MANAGEMENT'),
  (4,2,'HR MANAGEMENT'),
  (5,3,'TASK TRACK'),
  (6,3,'GRS'),
  (7,3,'DDS'),
  (8,4,'HR MANAGEMENT'),
  (9,6,'GL MANAGEMENT');

42 - SELECT DEPARTMENT, SUM(SALARY) AS TOTAL_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT

43 - SELECT DEPARTMENT, SUM(SALARY) AS TOTAL_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT ORDER BY TOTAL_SALARY ASC

44 -SELECT DEPARTMENT, SUM(SALARY) AS TOTAL_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT ORDER BY TOTAL_SALARY DESC

45 - SELECT DEPARTMENT, SUM(SALARY) AS TOTAL_SALARY, COUNT(*) AS TOTAL_DEPARTMENT FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT 

46 - SELECT DEPARTMENT, AVG(SALARY) AS AVG_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT ORDER BY AVG_SALARY ASC 

47 - SELECT DEPARTMENT, MAX(SALARY) AS MAX_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT ORDER BY MAX_SALARY ASC 

48 - SELECT DEPARTMENT, MIN (SALARY) AS MIN_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT ORDER BY MIN_SALARY ASC 

49 - SELECT DEPARTMENT, MIN (SALARY) AS MIN_SALARY FROM EMPLOYEEDETAILS_TABLE1 GROUP BY DEPARTMENT ORDER BY MIN_SALARY ASC

50 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 JOIN PROJECT_DETAILS ON EMPLOYEEDETAILS_TABLE1.EMPID = PROJECT_DETAILS.EMPLOYEEDETAIL_ID

51 - SELECT FIRST_NAME AS  EMP_NAME, PROJECT_NAME FROM EMPLOYEEDETAILS_TABLE1 JOIN PROJECT_DETAILS ON EMPLOYEEDETAILS_TABLE1.EMPID = PROJECT_DETAILS.EMPLOYEEDETAIL_ID  ORDER BY FIRST_NAME

52 - SELECT FIRST_NAME AS  EMP_NAME, PROJECT_NAME FROM EMPLOYEEDETAILS_TABLE1 LEFT JOIN PROJECT_DETAILS ON EMPLOYEEDETAILS_TABLE1.EMPID = PROJECT_DETAILS.EMPLOYEEDETAIL_ID 

53  -SELECT FIRST_NAME AS EMP_NAME, COALESCE(PROJECT_NAME, 'NO PROJECT ASSIGNED') AS PROJECT_NAME FROM EMPLOYEEDETAILS_TABLE1 LEFT JOIN PROJECT_DETAILS ON EMPLOYEEDETAILS_TABLE1.EMPID = PROJECT_DETAILS.EMPLOYEEDETAIL_ID ORDER BY FIRST_NAME

54 - SELECT PROJECT_NAME, FIRST_NAME FROM PROJECT_DETAILS LEFT JOIN EMPLOYEEDETAILS_TABLE1 ON PROJECT_DETAILS.EMPLOYEEDETAIL_ID = EMPLOYEEDETAILS_TABLE1.EMPID ORDER BY FIRST_NAME

55 - SELECT COALESCE(PROJECT_NAME,'NULL') AS PROJECT_NAME, COALESCE(FIRST_NAME,'NULL') AS FIRST_NAME FROM PROJECT_DETAILS LEFT JOIN EMPLOYEEDETAILS_TABLE1 ON PROJECT_DETAILS.EMPLOYEEDETAIL_ID = EMPLOYEEDETAILS_TABLE1.EMPID

56 - SELECT COALESCE(PROJECT_NAME,'NULL') AS PROJECT_NAME, COALESCE(FIRST_NAME,'NULL') AS FIRST_NAME FROM PROJECT_DETAILS LEFT JOIN EMPLOYEEDETAILS_TABLE1 ON PROJECT_DETAILS.EMPLOYEEDETAIL_ID = EMPLOYEEDETAILS_TABLE1.EMPID

57 - SELECT COALESCE(PROJECT_NAME,'NULL') AS PROJECT_NAME, COALESCE(FIRST_NAME,'NULL') AS FIRST_NAME FROM PROJECT_DETAILS LEFT JOIN EMPLOYEEDETAILS_TABLE1 ON PROJECT_DETAILS.EMPLOYEEDETAIL_ID = EMPLOYEEDETAILS_TABLE1.EMPID

58 - 

59 - 

60 - SELECT * FROM EMPLOYEEDETAILS_TABLE1 CROSS JOIN PROJECT_DETAILS










